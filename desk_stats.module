<?php
/**
 * @file
 * Desk Stats module for Drupal 7.x
 *
 * This module allows staff to enter statistics pertaining to patron inquiries
 */

/**
 * Implements hook_permission().
 */
function desk_stats_permission() {
  return array(
    'enter desk stats' => array(
      'title' => t('Enter Desk Statistics'),
    ),
    'view desk stats' => array(
      'title' => t('View Desk Statistics'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function desk_stats_menu() {

  $items = array();
  $items['desk-stats'] = array(
    'title' => 'Desk Statistics',
    'description' => 'Form for submitting desk stats',
    'page callback' => '_desk_stats_form_page',
    'access arguments' => array('enter desk stats'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['desk-stats-ajax-stats'] = array(
    'page callback' => 'desk_stats_ajax_get_stats',
    'type' => MENU_CALLBACK,
    'access arguments' => array('enter desk stats'),
    'delivery callback' => 'lcd_display_ajax_callback',
  );
  return $items;
}

/**
 * Custom page callback function
 *
 * If query string with (valid) location is present in the URL, the stats form for that location is loaded immediately.
 */
function _desk_stats_form_page() {
  drupal_add_js(drupal_get_path('module', 'desk_stats') . '/desk_stats.js');
  drupal_add_css(drupal_get_path('module', 'desk_stats') . '/desk_stats.css');

  global $user;
  $user_wrapper = entity_metadata_wrapper('user', user_load($user->uid));
  $default_location = $user_wrapper->field_desk_stats_location->value();

  $variables = array(
    'stats_form' => drupal_get_form('desk_stats_form', $default_location),
  );
  $get = drupal_get_query_parameters($_GET);
  if (array_key_exists('location', $get) && array_key_exists($get['location'], _get_locations())) {
    $location = $get['location'];
    $variables['stats_form'] = drupal_get_form('desk_stats_form', $location);
  }

  $output = theme('desk_stats_form_page', $variables);
  return $output;
}

/**
 * Implements hook_theme().
 */
function desk_stats_theme() {
  return array(
    'desk_stats_form_page' => array(
      'template' => 'desk_stats_form_page',
      'variables' => array('stats_form' => NULL),
    ),
  );
}

/**
 * Returns valid locations.
 *
 * @return array
 *   Array of location names.
 */
function _get_locations() {
  $locations = array(
    'archives' => 'Archives',
    'eng' => 'Engineering and Computer Science',
    'govdocs' => 'Government Documents',
    'microforms' => 'Microforms',
    'hilref' => 'Reference (HIL)',
    'hwk' => 'HWK Commons',
    'roamingref' => 'Roaming Reference (HIL)',
    'sci' => 'Science and Forestry',
    'office' => 'Office',
  );
  return $locations;
}

/**
 * Implements hook_form().
 *
 * Form constructor for location selection and stat submission.
 * Upon initial load, no location is selected and the stat portion of the form is not displayed (unless location query string is present in the url).
 * Once a location is selected, the stat portion of the form is loaded via AJAX.
 *
 * @see _stats_submit_callback
 *
 * @param string $location
 *   Location to record stats for, as per _get_locations(). Defaults to NULL.
 */
function desk_stats_form($form, &$form_state, $location = NULL) {

  $locations = array_merge(array('' => 'Select a location'), _get_locations());
  $location_default = !empty($form_state['values']['location']) ? $form_state['values']['location']: $location;
  $location_default = $location_default != NULL ? $location_default : '';

  $form['location'] = array(
    '#type' => 'select',
    '#title' => t('Location'),
    '#title_display' => 'invisible',
    '#options' => $locations,
    '#default_value' => $location_default,
    '#required' => TRUE,
    '#ajax' => array(
      'callback' => '_location_select_callback',
      'wrapper' => 'form-container',
    ),
  );

  $form['save_location'] = array(
    '#type' => 'button',
    '#name' => 'save-location',
    '#value' => 'Save as my default location',
    '#ajax' => array(
      'callback' => '_save_location_callback',
    ),
    '#attributes' => array('class' => array('hide save-location')),
  );

  // If a location has already been selected, create stats portion of form.
  if (!empty($form_state['values']['location']) || $location != NULL) {

    $location = !empty($form_state['values']['location']) ? $form_state['values']['location']: $location;

    // The div wrapping this fieldset has the same ID ("form-container") as the container/placeholder below.
    // This div replaces the placeholder during the AJAX callback, and is itself replaced during subsequent callbacks.
    $form['stats_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => 'Desk Statistics for ' . _get_locations()[$location],
      '#prefix' => '
          <div id="form-container" class="row-fluid">
            <div class="span7">',
      '#suffix' => '</div>
          <div class="key span5">
            <div id="stats">' . desk_stats_ajax_get_stats($location) .
            '</div>
            <h2>Stats Collector Key</h2>
            <dl>
              <dt>Quick information:</dt>
              <dd>Simple and specific questions, typically answered without using reference tools.</dd>
              <dt>Directional:</dt>
              <dd>Locational information, providing directions to campus locations, either inside or outside the library.</dd>
              <dt>Technical and Systems:</dt>
              <dd>Questions related to equipment (printers, scanners, PCs, etc.) or electronic access (off campus access, online resources, etc.)</dd>
              <dt>Administrative:</dt>
              <dd>Library operational inquiries (borrowing policy, placing holds, hours of operation, etc.)</dd>
              <dt>Basic Reference:</dt>
              <dd>Inquiries that can be answered fairly quickly (a few minutes), using library sources (website, reference tool, database, handout, etc.)</dd>
              <dt>Complex Reference:</dt>
              <dd>In-depth inquiries, requiring more time and perhaps teaching patrons how to use library resources. Indicate whether the transaction took more or fewer than  15 minutes.</dd>
              <dt>Expert Reference:</dt>
              <dd>Highly specific or challenging questions, usually answered by a liaison librarian or subject specialist.</dd>
              <dt>Inquiry Notes:</dt>
              <dd>Use to indicate information of interest to your unit.</dd>
            </dl>
          </div></div>',
    );

    if($location =='office') {
      $responder_options = array(
        'Marc Bragdon' => 'Marc Bragdon',
        'Barry Cull' => 'Barry Cull',
        'Sue Fisher' => 'Sue Fisher',
        'Richelle Witherspoon' => 'Richelle Witherspoon',
        'Aggie Sliwka' => 'Aggie Sliwka',
        'Alicia Mclaughlin' => 'Alicia Mclaughlin',
        'Patricia Simmons' => 'Patricia Simmons',
        'Linda Roulston' => 'Linda Roulston',
        'Joanne Smyth' => 'Joanne Smyth',
        'Leanne Wells' => 'Leanne Wells',
        'David Ross' => 'David Ross',
        'Linda Hansen' => 'Linda Hansen',
        'Diane Buhay' => 'Diane Buhay',
        'Angela Extell' => 'Angela Extell',
        'Deborah Eves' => 'Deborah Eves',
        'Phil Taber' => 'Phil Taber',
      );
      $form['stats_fieldset']['responder'] = array(
        '#type' => 'select',
        '#title' => t('Responder'),
        '#options' => $responder_options,
        '#required' => TRUE,
      );
    }
    else {
      $form['stats_fieldset']['responder'] = array(
        '#type' => 'hidden',
        '#value' => 'Research Help Desk',
        '#required' => TRUE,
      );
    }

    $inquiry_options = array(
      'Quick Information' => 'Quick Information',
      'Directional' => 'Directional',
      'Technical & Systems' => 'Technical & Systems',
      'Administrative' => 'Administrative',
      'Reference - Basic' => 'Reference - Basic',
      'Reference - Complex 5-15' => 'Reference - Complex 5-15',
      'Reference - Complex 15+' => 'Reference - Complex 15+',
      'Reference - Expert' => 'Reference - Expert',
    );
    $form['stats_fieldset']['inquiry'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Inquiry Type'),
      '#options' => $inquiry_options,
      '#required' => TRUE,
      '#prefix' => '<div class="inquiry">',
      '#suffix' => '</div>',
    );

    $form['stats_fieldset']['inquiry_notes'] = array(
      '#type' => 'textfield',
      '#title' => t('Inquiry Notes'),
      '#maxlength' => 256,
    );

    $patron_options = array(
      'Don\'t Know' => 'Don\'t Know',
      'Student' => 'Student',
      'Faculty/Staff' => 'Faculty/Staff',
      'External User' => 'External User',
    );
    $form['stats_fieldset']['patron'] = array(
      '#type' => 'radios',
      '#title' => t('Patron'),
      '#options' => $patron_options,
      '#default_value' => 'Don\'t Know',
      '#required' => TRUE,
    );

    $student_type_options = array(
      'Don\'t Know' => 'Don\'t Know',
      'UNB Undergraduate' => 'UNB Undergraduate',
      'UNB Graduate' => 'UNB Graduate',
      'STU' => 'STU',
      'NBCC' => 'NBCC',
    );
    $form['stats_fieldset']['student_type'] = array(
      '#type' => 'radios',
      '#title' => t('Student Type'),
      '#title_display' => 'invisible',
      '#options' => $student_type_options,
      '#default_value' => 'Don\'t Know',
      '#required' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="patron"]' => array('value' => 'Student'),
        ),
        'enabled' => array(
          ':input[name="patron"]' => array('value' => 'Student'),
        ),
      ),
      '#prefix' => '<div class="student-type subgroup">',
      '#suffix' => '</div>',
    );

    $staff_type_options = array(
      'Don\'t Know' => 'Don\'t Know',
      'UNB' => 'UNB',
      'STU' => 'STU',
      'NBCC' => 'NBCC',
    );
    $form['stats_fieldset']['staff_type'] = array(
      '#type' => 'radios',
      '#title' => t('Faculty/Staff Type'),
      '#title_display' => 'invisible',
      '#options' => $staff_type_options,
      '#default_value' => 'Don\'t Know',
      '#required' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="patron"]' => array('value' => 'Faculty/Staff'),
        ),
        'enabled' => array(
          ':input[name="patron"]' => array('value' => 'Faculty/Staff'),
        ),
      ),
      '#prefix' => '<div class="staff-type subgroup">',
      '#suffix' => '</div>',
    );

    $external_type_options = array(
      'Don\'t Know' => 'Don\'t Know',
      'Researcher' => 'Researcher',
      'General Public' => 'General Public',
    );

    $form['stats_fieldset']['external_type'] = array(
      '#type' => 'radios',
      '#title' => t('External User Type'),
      '#title_display' => 'invisible',
      '#options' => $external_type_options,
      '#default_value' => 'Don\'t Know',
      '#required' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="patron"]' => array('value' => 'External User'),
        ),
        'enabled' => array(
          ':input[name="patron"]' => array('value' => 'External User'),
        ),
      ),
      '#prefix' => '<div class="external-type subgroup">',
      '#suffix' => '</div>',
    );

    $method_options = array(
      'In Person' => 'In Person',
      'Phone' => 'Phone',
      'Email' => 'Email',
      'Chat / IM' => 'Chat / IM',
    );
    $form['stats_fieldset']['method'] = array(
      '#type' => 'radios',
      '#title' => t('Method'),
      '#options' => $method_options,
      '#default_value' => 'In Person',
      '#required' => TRUE,
    );

    $referrals_options = array(
      'No referral' => 'No referral',
      'Some aspects referred' => 'Some aspects referred',
      'Whole inquiry referred' => 'Whole inquiry referred',
    );
    $form['stats_fieldset']['referrals'] = array(
      '#type' => 'radios',
      '#title' => t('Referrals'),
      '#options' => $referrals_options,
      '#default_value' => 'No referral',
      '#required' => TRUE,
    );

    $form['stats_fieldset']['referral_details'] = array(
      '#type' => 'textfield',
      '#title' => t('Referral Details'),
      '#states' => array(
        'invisible' => array(
          ':input[name="referrals"]' => array('value' => 'No referral'),
        ),
        'disabled' => array(
          ':input[name="referrals"]' => array('value' => 'No referral'),
        ),
      ),
      '#maxlength' => 256,
    );

    $form['stats_fieldset']['override'] = array(
      '#type' => 'checkbox',
      '#title' => t('Override submission time?'),
    );

    $form['stats_fieldset']['date-container'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'class' => array(
          'row-fluid',
        ),
      ),
    );

    $form['stats_fieldset']['date-container']['date'] = array(
      '#type' => 'date_popup',
      '#title' => t('Inquiry Date'),
      '#title_display' => 'invisible',
      '#datepicker_options' => array('maxDate' => 0),
      '#date_format' => 'Y-m-d',
      '#states' => array(
        'visible' => array(
          ':input[name="override"]' => array('checked' => true),
        ),
        'required' => array(
          ':input[name="override"]' => array('checked' => true),
        ),
        'enabled' => array(
          ':input[name="override"]' => array('checked' => true),
        ),
      ),
      '#element_validate' => array('_validate_date_time'),
      '#prefix' => '<div class="date span6">',
      '#suffix' => '</div>',
    );

    $time_options = array();
    $time = getdate(strtotime(date('F j, Y', time()) . '00:00:00'));
    do {
      $option = date('g:i a', $time[0]);
      $time_options[$option] = $option;
      $time = getdate($time[0] + 1800);
    } while (!($time['hours'] == 0 && $time['minutes'] == 0));

    $form['stats_fieldset']['date-container']['time'] = array(
      '#type' => 'select',
      '#title' => t('Time'),
      '#options' => $time_options,
      '#states' => array(
        'visible' => array(
          ':input[name="override"]' => array('checked' => true),
        ),
        'required' => array(
          ':input[name="override"]' => array('checked' => true),
        ),
        'enabled' => array(
          ':input[name="override"]' => array('checked' => true),
        ),
      ),
      '#element_validate' => array('_validate_date_time'),
      '#prefix' => '<div class="time span6">',
      '#suffix' => '</div>',
    );

    $form['stats_fieldset']['submit'] = array(
      '#type' => 'submit',
      '#name' => 'stats-submit',
      '#value' => 'Record',
      '#id' => 'stats-submit',
      '#ajax' => array(
        'callback' => '_stats_submit_callback',
      ),
      '#attributes' => array('class' => array('btn-primary')),
    );
  }
  else {
    // Container that acts as a placeholder for the ticket portion of the form
    // until the ticket portion is loaded by the AJAX callback _topic_select_callback.
    // This container is removed and replaced during the above-noted callback.
    $form['form_container'] = array(
      '#type' => 'container',
      '#attributes' => array(
        'id' => 'form-container',
      ),
    );
  }

  return $form;
}

/**
 * AJAX callback for desk_stats_form() when location is selected.
 *
 * Valid locations will load the stats portion of the form.
 */
function _location_select_callback($form, &$form_state) {
  $location = $form_state['values']['location'];
  $commands = _refresh_messages();

  if (array_key_exists($location, _get_locations())) {
    $new_form_render = drupal_render($form['stats_fieldset']);
    $commands[] = ajax_command_replace('#form-container', $new_form_render);
  }
  else {
    $new_form_render = drupal_render($form['form_container']);
    $commands[] = ajax_command_replace('#form-container', $new_form_render);
  }

  if ($location == '') {
    $commands[] = ajax_command_invoke(NULL, 'hideSaveLocationButton', array());
  }
  else {
    $commands[] = ajax_command_invoke(NULL, 'showSaveLocationButton', array());
  }

  $commands[] = ajax_command_invoke(NULL, 'setUpForm', array());
  $commands[] = ajax_command_invoke(NULL, 'refreshStats', array($form_state['values']['location']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * AJAX callback for desk_stats_form() when location save button is clicked.
 *
 * Active location will be saved as user's preference.
 */
function _save_location_callback($form, &$form_state) {
  // clear validation errors from save location callback
  // (when "save location" button is pressed, whole form is validated, which is unnecessary at this point)
  drupal_get_messages();
  $location = $form['location']['#value'];
  if (!array_key_exists($location, _get_locations())) {
    form_error($element, t('Please select a valid location'));
  }
  else {
    //save location
    global $user;
    $current_user = user_load($user->uid);
    $edit = array(
      'field_desk_stats_location' => array(
        'und' => array(
          0 => array(
            'value' => $location,
          ),
        ),
      ),
    );
    user_save($current_user, $edit);
    drupal_set_message('Your selection has been saved');
  }

  $commands = desk_stats_refresh_messages();
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * AJAX callback for desk_stats_form() when stats are submitted.
 *
 * Handles form submission and refreshes the messages via AJAX
 *
 */
function _stats_submit_callback($form, &$form_state) {
  $commands = array();

  if (!db_table_exists('desk_stats')) {
    drupal_set_message('Desk Stats table does not exist','error');
  }

  $patron_options = '';
  if( $form_state['values']['patron'] == 'Student' ) {
    $patron_options = $form_state['values']['student_type'];
  }
  elseif( $form_state['values']['patron'] == 'Faculty/Staff' ) {
    $patron_options = $form_state['values']['staff_type'];
  }
  elseif( $form_state['values']['patron'] == 'External User' ) {
    $patron_options = $form_state['values']['external_type'];
  }

  $override = $form_state['values']['override'];
  if( $override == 1 ) {
    $str1 = print_r( $form_state['values']['date'], true );
    $str2 = print_r( $form_state['values']['time'], true );
    $datestr = $str1 . ' ' . $str2;
    $then = date_create($datestr);
    $submit_time = date_format($then, "Y-m-d H:i:s");
  }
  else {
    $now = date_create();
    $submit_time = date_format($now, "Y-m-d H:i:s");
  }

  $question_count = 0;
  foreach( $form_state['values']['inquiry'] as $inquiry ) {
    if( $inquiry ) {
      $question_count++;

      $data = array(
        'timestamp' => $submit_time,
        'location' => $form_state['values']['location'],
        'inq_type' => $inquiry,
        'inq_count' => $question_count,
        'inquiry_notes' => $form_state['values']['inquiry_notes'],
        'patron' => $form_state['values']['patron'],
        'patron_options' => $patron_options,
        'method' => $form_state['values']['method'],
        'referral' => $form_state['values']['referrals'],
        'responder' => $form_state['values']['responder'],
        'referral_details' => $form_state['values']['referral_details']
      );

      drupal_write_record('desk_stats', $data);
    }
  }

  if (!form_get_errors()) {
    drupal_set_message('Results recorded');

    $form['stats_fieldset']['inquiry_notes']['#value'] = '';
    $form['stats_fieldset']['referral_details']['#value'] = '';
    $new_form_render = drupal_render($form['stats_fieldset']);
    $commands[] = ajax_command_replace('#form-container', $new_form_render);

    $radioDefaults = array (
      'inquiry' => $form['stats_fieldset']['inquiry']['#default_value'] ? $form['stats_fieldset']['inquiry']['#default_value'] : '',
      'student_type' => $form['stats_fieldset']['student_type']['#default_value'] ? $form['stats_fieldset']['student_type']['#default_value'] : '',
      'staff_type' => $form['stats_fieldset']['staff_type']['#default_value'] ? $form['stats_fieldset']['staff_type']['#default_value'] : '',
      'patron' => $form['stats_fieldset']['patron']['#default_value'] ? $form['stats_fieldset']['patron']['#default_value'] : '',
      'method' => $form['stats_fieldset']['method']['#default_value'] ? $form['stats_fieldset']['method']['#default_value'] : '',
      'referrals' => $form['stats_fieldset']['referrals']['#default_value'] ? $form['stats_fieldset']['referrals']['#default_value'] : '',
    );
    $commands[] = ajax_command_invoke(NULL, 'resetFields', array(json_encode($radioDefaults)));

  }
  $commands[] = ajax_command_invoke(NULL, 'fadeSuccess', array());
  $commands[] = ajax_command_invoke(NULL, 'setUpForm', array());
  $commands[] = ajax_command_invoke(NULL, 'refreshStats', array($form_state['values']['location']));
  $commands = array_merge($commands, _refresh_messages());
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Element validation for 'timestamp' in desk_stats_form().
 *
 * Throws error if override time is selected and timestamp is empty.
 *
 */
function _validate_date_time($element, &$form_state, $form) {
  if ($element['#name'] == 'date') {
    $value = $element['#value']['date'];
  }
  else {
    $value = $element['#value'];
  }
  $override = $form_state['values']['override'];

  if ($override == 1 && ($value == '')) {
    form_error($element, t('Please enter the inquiry ' . $element['#name'] . '.'));
  }
}

/**
 * Clears previously displayed messages, displays new messages, and resets messages queue.
 */
function _desk_stats_refresh_messages($commands = array()) {
  $commands[] = ajax_command_remove('div#messages');
  $commands[] = ajax_command_before('div.region-content', '<div id="messages"><div class="section clearfix">' . theme('status_messages') . "</div></div>");
  return $commands;
}


/**
 * Implements hook_form_alter().
 */
function desk_stats_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'user_profile_form') {
    unset($form['field_desk_stats_location']);
  }
}

/**
 * Clears previously displayed messages, displays new messages, and resets messages queue.
 */
function desk_stats_refresh_messages($commands = array()) {
  $commands[] = ajax_command_remove('div#messages');
  $commands[] = ajax_command_before('div.region-content', '<div id="messages"><div class="section clearfix">' . theme('status_messages') . "</div></div>");
  return $commands;
}


/**
 * Defines data that should be returned from the AJAX call. Data returned here gets sent to desk_stats_ajax_callback().
 *
 * @param string $location
 *   Request parameter from url
 *
 * @return string
 *   Markup to be displayed
 *
 * @see desk_stats_ajax_callback($page_callback_result)
 */
function desk_stats_ajax_get_stats($location) {
  $stats_markup = '';
  
  $later = new DateTime('tomorrow');
  $tomorrow = date_format($later, "Y-m-d H:i:s");
  $past = new DateTime('yesterday');
  $yesterday = date_format($past, "Y-m-d 23:59:59");
  $today_result = array();
  $today_result = db_query("SELECT count(*) FROM desk_stats WHERE location = :location AND (timestamp > :yesterday AND timestamp < :tomorrow)", array(':location' => $location, ':yesterday' => $yesterday, ':tomorrow' => $tomorrow));
  foreach( $today_result->fetchCol(0) as $x ) {
    $today_count = $x;
  }

  $today = date_create();
  $now = date_format($today, "Y-m-d H:i:s");
  $ago = $today->modify('-2 hour');
  $two_hours_ago = date_format($ago, "Y-m-d H:i:s");
  $two_hour_result = array();
  $two_hour_result = db_query("SELECT count(*) FROM desk_stats WHERE location = :location AND (timestamp > :two_hours_ago AND timestamp < :now)", array(':location' => $location, ':two_hours_ago' => $two_hours_ago, ':now' => $now));
  foreach( $two_hour_result->fetchCol(0) as $x ) {
    $two_hour_count = $x;
  }

  $stats_markup = '<h2>Location Stats</h2><table><tr><th>Inquiries today</th><td>' . $today_count . '</td></tr><tr><th>Last 2 hours</th><td>' . $two_hour_count . '</td></tr></table>';

  return $stats_markup;
}

/**
 * Prints markup for when ajax call is made.
 *
 * @param string $page_callback_result
 *   Markup from desk_stats_ajax_get_stats($location)
 */
function desk_stats_ajax_callback($page_callback_result) {
  print $page_callback_result;
}
